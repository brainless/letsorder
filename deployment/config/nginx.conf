# LetsOrder Nginx Configuration
# This configuration sets up a reverse proxy for the LetsOrder backend
# with CloudFlare Origin Certificate authentication

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

# Upstream backend
upstream letsorder_backend {
    server 127.0.0.1:8080 fail_timeout=5s max_fails=3;
    keepalive 32;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name api.letsorder.app;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    server_name api.letsorder.app;
    
    # SSL Configuration with CloudFlare Origin Certificates
    ssl_certificate /etc/ssl/cloudflare/cert.pem;
    ssl_certificate_key /etc/ssl/cloudflare/key.pem;
    ssl_client_certificate /etc/ssl/cloudflare/origin-ca.pem;
    ssl_verify_client on;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    
    # Logging
    access_log /var/log/nginx/letsorder_access.log;
    error_log /var/log/nginx/letsorder_error.log;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types application/json application/javascript text/css text/javascript text/xml application/xml;
    
    # Health check endpoint (bypasses rate limiting)
    location /health {
        access_log off;
        proxy_pass http://letsorder_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        # Apply rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers for browser requests
        add_header 'Access-Control-Allow-Origin' 'https://admin.letsorder.app' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Max-Age' 86400 always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        # Proxy to backend
        proxy_pass http://letsorder_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        
        # Keep alive
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Default location - redirect to documentation or admin
    location / {
        return 301 https://admin.letsorder.app;
    }
}

# Server block for handling CloudFlare errors
server {
    listen 443 ssl http2 default_server;
    server_name _;
    
    ssl_certificate /etc/ssl/cloudflare/cert.pem;
    ssl_certificate_key /etc/ssl/cloudflare/key.pem;
    ssl_client_certificate /etc/ssl/cloudflare/origin-ca.pem;
    ssl_verify_client on;
    
    return 444; # Close connection without response
}