name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  DATABASE_URL: sqlite::memory:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --check

      - name: Setup database and prepare SQLx cache
        run: |
          cargo install sqlx-cli || true
          mkdir -p db
          sqlite3 db/test.db < migrations/20250131000001_initial_schema.sql
          sqlite3 db/test.db < migrations/20250131000002_manager_invites.sql
          sqlite3 db/test.db < migrations/20250131000003_add_customer_name_to_orders.sql
          sqlite3 db/test.db < migrations/20250813000004_add_contact_submissions.sql
          sqlite3 db/test.db < migrations/20250820000005_add_email_verification.sql
          cargo sqlx prepare -- --all-targets
        env:
          DATABASE_URL: sqlite:./db/test.db

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security audit
        run: cargo audit

  sqlx-check:
    name: SQLx Query Verification
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-sqlx-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install sqlx-cli
        run: cargo install sqlx-cli || true

      - name: Setup test database
        run: |
          mkdir -p db
          sqlite3 db/test.db < migrations/20250131000001_initial_schema.sql
          sqlite3 db/test.db < migrations/20250131000002_manager_invites.sql
          sqlite3 db/test.db < migrations/20250131000003_add_customer_name_to_orders.sql
          sqlite3 db/test.db < migrations/20250813000004_add_contact_submissions.sql
          sqlite3 db/test.db < migrations/20250820000005_add_email_verification.sql

      - name: Verify SQLx queries
        run: cargo sqlx prepare --check
        env:
          DATABASE_URL: sqlite:./db/test.db

  matrix-test:
    name: Matrix Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ubuntu-latest-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-${{ matrix.rust }}-cargo-

      - name: Setup database and prepare SQLx cache
        run: |
          cargo install sqlx-cli || true
          mkdir -p db
          sqlite3 db/test.db < migrations/20250131000001_initial_schema.sql
          sqlite3 db/test.db < migrations/20250131000002_manager_invites.sql
          sqlite3 db/test.db < migrations/20250131000003_add_customer_name_to_orders.sql
          sqlite3 db/test.db < migrations/20250813000004_add_contact_submissions.sql
          sqlite3 db/test.db < migrations/20250820000005_add_email_verification.sql
          cargo sqlx prepare -- --all-targets
        env:
          DATABASE_URL: sqlite:./db/test.db

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose
