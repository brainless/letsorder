name: Dependency Updates

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

jobs:
  rust-updates:
    name: Rust Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Check for outdated dependencies
        run: |
          echo "## Rust Dependencies Update Report" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          cargo outdated --format json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "Found outdated dependencies:"
            cat outdated.json
            echo "Outdated dependencies found. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create PR for Rust updates
        if: hashFiles('outdated.json') != ''
        run: |
          echo "Would create PR for Rust dependency updates"
          # This would typically use a tool like dependabot or renovate

  node-admin-updates:
    name: Admin App Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./adminapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './adminapp/package-lock.json'

      - name: Check for outdated dependencies
        run: |
          echo "## Admin App Dependencies Update Report" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "Found outdated dependencies:"
            cat outdated.json
            echo "Outdated dependencies found. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security audit
        run: |
          echo "### Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --json > audit.json || true
          if [ -s audit.json ]; then
            vulnerabilities=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities security vulnerabilities" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  node-website-updates:
    name: Website Dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Check for outdated dependencies
        run: |
          echo "## Website Dependencies Update Report" >> $GITHUB_STEP_SUMMARY
          echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          pnpm outdated --format json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "Found outdated dependencies:"
            cat outdated.json
            echo "Outdated dependencies found. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security audit
        run: |
          echo "### Security Audit" >> $GITHUB_STEP_SUMMARY
          pnpm audit --json > audit.json || true
          if [ -s audit.json ]; then
            vulnerabilities=$(cat audit.json | jq '.summary.total // 0')
            if [ "$vulnerabilities" -gt 0 ]; then
              echo "⚠️ Found $vulnerabilities security vulnerabilities" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          fi