---
export interface Props {
  item: {
    id: number;
    name: string;
    description: string;
    price: number;
    quantity: number;
    specialRequests?: string;
    sectionName?: string;
  };
  showSpecialRequests?: boolean;
  className?: string;
}

const { item, showSpecialRequests = false, className = '' } = Astro.props;
const itemTotal = item.price * item.quantity;
---

<div class={`cart-item border-b border-gray-100 pb-4 last:border-b-0 ${className}`} data-item-id={item.id}>
  <div class="flex items-start justify-between">
    <!-- Item Info -->
    <div class="flex-1 min-w-0">
      <div class="flex items-center space-x-2">
        <h4 class="font-medium text-gray-900 truncate">{item.name}</h4>
        {item.sectionName && (
          <span class="text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded">
            {item.sectionName}
          </span>
        )}
      </div>
      
      {item.description && (
        <p class="text-sm text-gray-600 mt-1 line-clamp-2">{item.description}</p>
      )}
      
      <!-- Special Requests -->
      {showSpecialRequests && (
        <div class="mt-2">
          <button 
            type="button" 
            class="special-requests-toggle text-xs text-blue-600 hover:text-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 rounded"
            aria-expanded="false"
            aria-controls={`special-requests-${item.id}`}
          >
            Add special requests
          </button>
          
          <div class="special-requests-section hidden mt-2" id={`special-requests-${item.id}`}>
            <textarea
              class="special-requests-input w-full text-sm border border-gray-300 rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              placeholder="Any special requests for this item?"
              rows="2"
              maxlength="200"
              data-item-id={item.id}
              aria-label={`Special requests for ${item.name}`}
            >{item.specialRequests || ''}</textarea>
            <div class="flex justify-between items-center mt-1">
              <span class="text-xs text-gray-500">
                <span class="character-count">
                  {(item.specialRequests || '').length}
                </span>/200 characters
              </span>
              <button 
                type="button"
                class="save-requests-btn text-xs text-blue-600 hover:text-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 rounded px-2 py-1"
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>

    <!-- Price and Controls -->
    <div class="ml-4 text-right flex-shrink-0">
      <!-- Individual Price -->
      <div class="text-sm text-gray-600">
        ${item.price.toFixed(2)} each
      </div>
      
      <!-- Item Total -->
      <div class="font-semibold text-gray-900 mb-2">
        ${itemTotal.toFixed(2)}
      </div>

      <!-- Quantity Controls -->
      <div class="flex items-center space-x-2 mb-2">
        <button 
          type="button"
          class="quantity-btn decrease-btn bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-1 px-2 rounded-full w-7 h-7 flex items-center justify-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1"
          aria-label={`Decrease quantity of ${item.name}`}
          data-action="decrease"
          data-item-id={item.id}
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
          </svg>
        </button>
        
        <span class="quantity-display font-medium text-gray-900 min-w-[2ch] text-center" role="status" aria-live="polite">
          {item.quantity}
        </span>
        
        <button 
          type="button"
          class="quantity-btn increase-btn bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded-full w-7 h-7 flex items-center justify-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1"
          aria-label={`Increase quantity of ${item.name}`}
          data-action="increase"
          data-item-id={item.id}
        >
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
          </svg>
        </button>
      </div>

      <!-- Remove Button -->
      <button 
        type="button"
        class="remove-btn text-xs text-red-600 hover:text-red-800 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 rounded px-2 py-1 transition-colors"
        data-item-id={item.id}
        aria-label={`Remove ${item.name} from cart`}
      >
        Remove
      </button>
    </div>
  </div>

  {item.specialRequests && (
    <div class="mt-2 text-sm text-gray-700 bg-yellow-50 p-2 rounded border-l-2 border-yellow-200">
      <strong class="text-yellow-800">Special requests:</strong> {item.specialRequests}
    </div>
  )}
</div>

<script>
  import { getCartInstance, type CartService } from '../lib/cart.ts';

  class CartItem {
    private element: HTMLElement;
    private cart: CartService;
    private itemId: string;
    private unsubscribe?: () => void;

    // UI Elements
    private quantityDisplay: HTMLElement;
    private decreaseBtn: HTMLButtonElement;
    private increaseBtn: HTMLButtonElement;
    private removeBtn: HTMLButtonElement;
    private specialRequestsToggle?: HTMLButtonElement;
    private specialRequestsSection?: HTMLElement;
    private specialRequestsInput?: HTMLTextAreaElement;
    private saveRequestsBtn?: HTMLButtonElement;
    private characterCount?: HTMLElement;

    constructor(element: HTMLElement) {
      this.element = element;
      this.itemId = parseInt(element.dataset.itemId || '0');

      if (!this.itemId) {
        console.error('CartItem: No item ID found');
        return;
      }

      this.initializeElements();
      this.initializeCart();
      this.bindEvents();
      this.updateDisplay();
    }

    private initializeElements(): void {
      this.quantityDisplay = this.element.querySelector('.quantity-display') as HTMLElement;
      this.decreaseBtn = this.element.querySelector('.decrease-btn') as HTMLButtonElement;
      this.increaseBtn = this.element.querySelector('.increase-btn') as HTMLButtonElement;
      this.removeBtn = this.element.querySelector('.remove-btn') as HTMLButtonElement;
      this.specialRequestsToggle = this.element.querySelector('.special-requests-toggle') as HTMLButtonElement;
      this.specialRequestsSection = this.element.querySelector('.special-requests-section') as HTMLElement;
      this.specialRequestsInput = this.element.querySelector('.special-requests-input') as HTMLTextAreaElement;
      this.saveRequestsBtn = this.element.querySelector('.save-requests-btn') as HTMLButtonElement;
      this.characterCount = this.element.querySelector('.character-count') as HTMLElement;
    }

    private initializeCart(): void {
      // Get restaurant and table codes from URL
      const urlPath = window.location.pathname;
      const matches = urlPath.match(/\/m\/([^\/]+)\/([^\/]+)/);
      
      if (matches) {
        const [, restaurantCode, tableCode] = matches;
        this.cart = getCartInstance(restaurantCode, tableCode);
        
        // Subscribe to cart changes
        this.unsubscribe = this.cart.subscribe(() => {
          this.updateDisplay();
        });
      } else {
        console.error('Could not extract restaurant and table codes from URL');
      }
    }

    private bindEvents(): void {
      if (!this.cart) return;

      // Quantity controls
      this.decreaseBtn?.addEventListener('click', () => {
        const currentQuantity = this.cart.getItemQuantity(this.itemId);
        if (currentQuantity > 1) {
          this.cart.updateQuantity(this.itemId, currentQuantity - 1);
        } else {
          // If quantity would become 0, remove the item
          this.cart.removeItem(this.itemId);
        }
      });

      this.increaseBtn?.addEventListener('click', () => {
        const currentQuantity = this.cart.getItemQuantity(this.itemId);
        this.cart.updateQuantity(this.itemId, currentQuantity + 1);
      });

      // Remove button
      this.removeBtn?.addEventListener('click', () => {
        if (confirm('Are you sure you want to remove this item from your cart?')) {
          this.cart.removeItem(this.itemId);
        }
      });

      // Special requests toggle
      this.specialRequestsToggle?.addEventListener('click', () => {
        this.toggleSpecialRequests();
      });

      // Special requests input
      this.specialRequestsInput?.addEventListener('input', (e) => {
        this.updateCharacterCount();
      });

      // Save special requests
      this.saveRequestsBtn?.addEventListener('click', () => {
        this.saveSpecialRequests();
      });

      // Auto-save special requests on blur
      this.specialRequestsInput?.addEventListener('blur', () => {
        this.saveSpecialRequests();
      });

      // Keyboard support
      this.bindKeyboardEvents();
    }

    private bindKeyboardEvents(): void {
      // Quantity controls
      [this.decreaseBtn, this.increaseBtn, this.removeBtn].forEach(btn => {
        btn?.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            btn.click();
          }
        });
      });

      // Special requests input keyboard shortcuts
      this.specialRequestsInput?.addEventListener('keydown', (e) => {
        // Save on Ctrl/Cmd + Enter
        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
          e.preventDefault();
          this.saveSpecialRequests();
        }
        
        // Escape to close
        if (e.key === 'Escape') {
          this.toggleSpecialRequests();
        }
      });
    }

    private updateDisplay(): void {
      if (!this.cart) return;

      const quantity = this.cart.getItemQuantity(this.itemId);
      
      // Update quantity display
      if (this.quantityDisplay) {
        this.quantityDisplay.textContent = quantity.toString();
      }

      // Disable decrease button if quantity is 1 (since we remove on 0)
      if (this.decreaseBtn) {
        const willRemove = quantity <= 1;
        this.decreaseBtn.disabled = false; // Always enabled since it removes at quantity 1
        
        // Update button appearance and label for remove action
        if (willRemove) {
          this.decreaseBtn.setAttribute('aria-label', `Remove ${this.getItemName()} from cart`);
          this.decreaseBtn.classList.add('bg-red-200', 'hover:bg-red-300', 'text-red-700');
          this.decreaseBtn.classList.remove('bg-gray-200', 'hover:bg-gray-300', 'text-gray-700');
        } else {
          this.decreaseBtn.setAttribute('aria-label', `Decrease quantity of ${this.getItemName()}`);
          this.decreaseBtn.classList.remove('bg-red-200', 'hover:bg-red-300', 'text-red-700');
          this.decreaseBtn.classList.add('bg-gray-200', 'hover:bg-gray-300', 'text-gray-700');
        }
      }

      // Update item total (this would need to be handled by parent component)
      this.updateItemTotal();
    }

    private updateItemTotal(): void {
      const item = this.cart.getItem(this.itemId);
      if (!item) return;

      const totalElement = this.element.querySelector('.item-total') as HTMLElement;
      if (totalElement) {
        totalElement.textContent = `$${(item.price * item.quantity).toFixed(2)}`;
      }
    }

    private toggleSpecialRequests(): void {
      if (!this.specialRequestsSection || !this.specialRequestsToggle) return;

      const isVisible = !this.specialRequestsSection.classList.contains('hidden');
      
      if (isVisible) {
        this.specialRequestsSection.classList.add('hidden');
        this.specialRequestsToggle.setAttribute('aria-expanded', 'false');
        this.specialRequestsToggle.textContent = 'Add special requests';
      } else {
        this.specialRequestsSection.classList.remove('hidden');
        this.specialRequestsToggle.setAttribute('aria-expanded', 'true');
        this.specialRequestsToggle.textContent = 'Hide special requests';
        this.specialRequestsInput?.focus();
      }
    }

    private updateCharacterCount(): void {
      if (!this.characterCount || !this.specialRequestsInput) return;

      const count = this.specialRequestsInput.value.length;
      this.characterCount.textContent = count.toString();
      
      // Color coding for character limit
      if (count > 180) {
        this.characterCount.classList.add('text-red-500');
        this.characterCount.classList.remove('text-yellow-500', 'text-gray-500');
      } else if (count > 150) {
        this.characterCount.classList.add('text-yellow-500');
        this.characterCount.classList.remove('text-red-500', 'text-gray-500');
      } else {
        this.characterCount.classList.add('text-gray-500');
        this.characterCount.classList.remove('text-red-500', 'text-yellow-500');
      }
    }

    private saveSpecialRequests(): void {
      if (!this.specialRequestsInput || !this.cart) return;

      const requests = this.specialRequestsInput.value.trim();
      this.cart.updateSpecialRequests(this.itemId, requests);
      
      // Show saved indicator
      this.showSavedIndicator();
    }

    private showSavedIndicator(): void {
      if (!this.saveRequestsBtn) return;

      const originalText = this.saveRequestsBtn.textContent;
      this.saveRequestsBtn.textContent = 'Saved!';
      this.saveRequestsBtn.classList.add('text-green-600');
      
      setTimeout(() => {
        this.saveRequestsBtn.textContent = originalText;
        this.saveRequestsBtn.classList.remove('text-green-600');
      }, 2000);
    }

    private getItemName(): string {
      const nameElement = this.element.querySelector('h4');
      return nameElement?.textContent || 'item';
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Initialize all CartItem instances
  function initializeCartItems(): void {
    const cartItems = document.querySelectorAll('.cart-item');
    cartItems.forEach(item => {
      try {
        new CartItem(item as HTMLElement);
      } catch (error) {
        console.error('Failed to initialize CartItem:', error);
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCartItems);
  } else {
    initializeCartItems();
  }

  // Re-initialize if new cart items are added dynamically
  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      mutation.addedNodes.forEach(node => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node as Element;
          if (element.classList?.contains('cart-item')) {
            new CartItem(element as HTMLElement);
          } else {
            const nestedItems = element.querySelectorAll?.('.cart-item');
            nestedItems?.forEach(item => {
              new CartItem(item as HTMLElement);
            });
          }
        }
      });
    });
  });

  observer.observe(document.body, { childList: true, subtree: true });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .cart-item {
    transition: all 0.2s ease;
  }

  .cart-item:hover {
    background-color: rgba(249, 250, 251, 0.5);
  }

  .quantity-btn:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  .special-requests-section {
    animation: slideDown 0.2s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>