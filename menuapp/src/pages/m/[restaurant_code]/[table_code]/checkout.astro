---
import Layout from '../../../../layouts/Layout.astro';
import { fetchMenu, type MenuData } from '../../../../lib/api';

export async function getStaticPaths() {
  return [];
}

const { restaurant_code, table_code } = Astro.params;

// Default fallback data
const fallbackMenuData: MenuData = {
  restaurant: {
    name: "Sample Restaurant",
    code: restaurant_code || 'sample',
    address: "123 Sample Street, Sample City"
  },
  table: {
    code: table_code || 'table1',
    name: `Table ${table_code || 'Sample'}`
  },
  sections: []
};

let menuData: MenuData = fallbackMenuData;
let hasApiError = false;

if (restaurant_code && table_code) {
  try {
    const apiResponse = await fetchMenu(restaurant_code, table_code);
    menuData = {
      restaurant: {
        name: apiResponse.restaurant.name,
        code: restaurant_code,
        address: apiResponse.restaurant.address
      },
      table: {
        code: table_code,
        name: `Table ${table_code}`
      },
      sections: apiResponse.sections || []
    };
  } catch (error) {
    console.error('Failed to fetch menu data:', error);
    hasApiError = true;
  }
}

const pageTitle = `Checkout - ${menuData.restaurant.name}`;
---

<Layout title={pageTitle}>
  <!-- Header -->
  <div class="bg-white border-b border-gray-200 mb-6">
    <div class="max-w-4xl mx-auto px-4 py-4">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Review Your Order</h1>
          <p class="text-gray-600 text-sm mt-1">
            {menuData.restaurant.name} â€¢ {menuData.table.name}
          </p>
        </div>
        <a 
          href={`/m/${restaurant_code}/${table_code}`}
          class="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center"
        >
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Back to Menu
        </a>
      </div>
    </div>
  </div>

  <!-- Order Review Container -->
  <div class="max-w-4xl mx-auto px-4">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      
      <!-- Order Items -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">Order Items</h2>
          </div>
          
          <!-- Empty cart state -->
          <div id="empty-order-state" class="p-8 text-center hidden">
            <svg class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
            </svg>
            <h3 class="text-xl font-medium text-gray-900 mb-2">Your cart is empty</h3>
            <p class="text-gray-500 mb-4">Add items from the menu to get started.</p>
            <a 
              href={`/m/${restaurant_code}/${table_code}`}
              class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors"
            >
              Browse Menu
            </a>
          </div>

          <!-- Order items list -->
          <div id="order-items-list" class="divide-y divide-gray-200"></div>

          <!-- Order validation errors -->
          <div id="validation-errors" class="hidden p-4 bg-red-50 border-l-4 border-red-400">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Order Issues</h3>
                <ul id="validation-error-list" class="mt-2 text-sm text-red-700 list-disc list-inside"></ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Order Summary & Checkout -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 sticky top-4">
          
          <!-- Order Total -->
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Order Summary</h2>
            <div class="space-y-2">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600">Items (<span id="total-item-count">0</span>)</span>
                <span class="text-gray-900" id="items-subtotal">$0.00</span>
              </div>
              <div class="flex justify-between font-medium text-lg border-t border-gray-200 pt-2">
                <span>Total</span>
                <span id="order-total">$0.00</span>
              </div>
            </div>
          </div>

          <!-- Customer Information -->
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-sm font-medium text-gray-900 mb-3">Contact Information (Optional)</h3>
            <div class="space-y-3">
              <div>
                <label for="customer-name" class="block text-xs font-medium text-gray-700 mb-1">Name</label>
                <input
                  type="text"
                  id="customer-name"
                  class="w-full text-sm border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Your name"
                  maxlength="100"
                />
              </div>
              <div>
                <label for="customer-phone" class="block text-xs font-medium text-gray-700 mb-1">Phone</label>
                <input
                  type="tel"
                  id="customer-phone"
                  class="w-full text-sm border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Phone number"
                  maxlength="20"
                />
              </div>
            </div>
          </div>

          <!-- Place Order Button -->
          <div class="px-6 py-4">
            <button 
              id="place-order-btn"
              class="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-medium py-3 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
              disabled
            >
              <span id="place-order-text">Place Order</span>
              <span id="place-order-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Placing order...
              </span>
            </button>
            <p class="text-xs text-gray-500 text-center mt-2">
              Your order will be sent directly to the restaurant kitchen.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Order Success Modal -->
  <div id="order-success-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-md mx-4 p-6 text-center">
      <div class="mb-4">
        <svg class="h-16 w-16 text-green-500 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 class="text-xl font-bold text-gray-900 mb-2">Order Placed Successfully!</h3>
      <p class="text-gray-600 mb-2">Your order has been sent to the kitchen.</p>
      <p class="text-sm text-gray-500 mb-6">
        Order ID: <span id="success-order-id" class="font-medium text-gray-900"></span>
      </p>
      <div class="flex flex-col sm:flex-row gap-3">
        <button 
          id="view-menu-btn"
          class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Back to Menu
        </button>
        <button 
          id="new-order-btn"
          class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
        >
          Place Another Order
        </button>
      </div>
    </div>
  </div>

</Layout>

<script>
  import { getCartInstance, formatPrice, type CartService } from '../../../../lib/cart.ts';
  import { createOrder } from '../../../../lib/api.ts';
  import type { CartState, CartItem } from '../../../../lib/api.ts';

  class OrderReview {
    private cart: CartService;
    private unsubscribe?: () => void;
    
    // UI Elements
    private emptyState: HTMLElement;
    private orderItemsList: HTMLElement;
    private validationErrors: HTMLElement;
    private validationErrorList: HTMLElement;
    private totalItemCount: HTMLElement;
    private itemsSubtotal: HTMLElement;
    private orderTotal: HTMLElement;
    private customerNameInput: HTMLInputElement;
    private customerPhoneInput: HTMLInputElement;
    private placeOrderBtn: HTMLButtonElement;
    private placeOrderText: HTMLElement;
    private placeOrderLoading: HTMLElement;
    private orderSuccessModal: HTMLElement;
    private successOrderId: HTMLElement;
    private viewMenuBtn: HTMLButtonElement;
    private newOrderBtn: HTMLButtonElement;

    constructor() {
      this.initializeElements();
      this.initializeCart();
      this.bindEvents();
      this.updateDisplay();
    }

    private initializeElements(): void {
      this.emptyState = document.getElementById('empty-order-state')!;
      this.orderItemsList = document.getElementById('order-items-list')!;
      this.validationErrors = document.getElementById('validation-errors')!;
      this.validationErrorList = document.getElementById('validation-error-list')!;
      this.totalItemCount = document.getElementById('total-item-count')!;
      this.itemsSubtotal = document.getElementById('items-subtotal')!;
      this.orderTotal = document.getElementById('order-total')!;
      this.customerNameInput = document.getElementById('customer-name') as HTMLInputElement;
      this.customerPhoneInput = document.getElementById('customer-phone') as HTMLInputElement;
      this.placeOrderBtn = document.getElementById('place-order-btn') as HTMLButtonElement;
      this.placeOrderText = document.getElementById('place-order-text')!;
      this.placeOrderLoading = document.getElementById('place-order-loading')!;
      this.orderSuccessModal = document.getElementById('order-success-modal')!;
      this.successOrderId = document.getElementById('success-order-id')!;
      this.viewMenuBtn = document.getElementById('view-menu-btn') as HTMLButtonElement;
      this.newOrderBtn = document.getElementById('new-order-btn') as HTMLButtonElement;
    }

    private initializeCart(): void {
      const urlPath = window.location.pathname;
      const matches = urlPath.match(/\/m\/([^\/]+)\/([^\/]+)/);
      
      if (matches) {
        const [, restaurantCode, tableCode] = matches;
        this.cart = getCartInstance(restaurantCode, tableCode);
        
        this.unsubscribe = this.cart.subscribe((state) => {
          this.updateDisplay();
        });
      } else {
        console.error('Could not extract restaurant and table codes from URL');
      }
    }

    private bindEvents(): void {
      if (!this.cart) return;

      this.placeOrderBtn.addEventListener('click', () => {
        this.handlePlaceOrder();
      });

      this.viewMenuBtn.addEventListener('click', () => {
        this.navigateToMenu();
      });

      this.newOrderBtn.addEventListener('click', () => {
        this.startNewOrder();
      });

      // Form validation
      [this.customerNameInput, this.customerPhoneInput].forEach(input => {
        input?.addEventListener('input', () => {
          this.validateOrder();
        });
      });
    }

    private updateDisplay(): void {
      if (!this.cart) return;

      const state = this.cart.getState();
      const isEmpty = this.cart.isEmpty();

      if (isEmpty) {
        this.showEmptyState();
      } else {
        this.showOrderContent(state);
      }

      this.validateOrder();
    }

    private showEmptyState(): void {
      this.emptyState.classList.remove('hidden');
      this.orderItemsList.innerHTML = '';
      this.validationErrors.classList.add('hidden');
      
      this.totalItemCount.textContent = '0';
      this.itemsSubtotal.textContent = '$0.00';
      this.orderTotal.textContent = '$0.00';
    }

    private showOrderContent(state: CartState): void {
      this.emptyState.classList.add('hidden');
      this.renderOrderItems(state.items);
      this.updateOrderTotals(state);
    }

    private renderOrderItems(items: CartItem[]): void {
      this.orderItemsList.innerHTML = '';

      items.forEach((item, index) => {
        const itemElement = this.createOrderItemElement(item, index === items.length - 1);
        this.orderItemsList.appendChild(itemElement);
      });
    }

    private createOrderItemElement(item: CartItem, isLast: boolean): HTMLElement {
      const div = document.createElement('div');
      div.className = `p-4 ${!isLast ? 'border-b border-gray-200' : ''}`;
      
      const itemTotal = item.price * item.quantity;

      div.innerHTML = `
        <div class="flex items-start justify-between">
          <div class="flex-1 min-w-0">
            <div class="flex items-center space-x-2 mb-1">
              <h3 class="font-medium text-gray-900">${item.name}</h3>
              ${item.sectionName ? `<span class="text-xs text-gray-500 bg-gray-100 px-2 py-0.5 rounded">${item.sectionName}</span>` : ''}
            </div>
            ${item.description ? `<p class="text-sm text-gray-600 mb-2">${item.description}</p>` : ''}
            ${item.specialRequests ? `
              <div class="text-sm text-gray-700 bg-yellow-50 p-2 rounded border-l-2 border-yellow-200 mb-2">
                <strong class="text-yellow-800">Special requests:</strong> ${item.specialRequests}
              </div>
            ` : ''}
            <div class="flex items-center space-x-4 text-sm text-gray-600">
              <span>Qty: ${item.quantity}</span>
              <span>${formatPrice(item.price)} each</span>
            </div>
          </div>
          <div class="ml-4 text-right">
            <div class="font-semibold text-lg text-gray-900">${formatPrice(itemTotal)}</div>
            <button 
              class="edit-item-btn text-xs text-blue-600 hover:text-blue-800 mt-1 focus:outline-none"
              data-item-id="${item.id}"
            >
              Edit
            </button>
          </div>
        </div>
      `;

      // Bind edit button
      const editBtn = div.querySelector('.edit-item-btn') as HTMLButtonElement;
      editBtn?.addEventListener('click', () => {
        this.navigateToMenu();
      });

      return div;
    }

    private updateOrderTotals(state: CartState): void {
      this.totalItemCount.textContent = state.totalItems.toString();
      this.itemsSubtotal.textContent = formatPrice(state.totalPrice);
      this.orderTotal.textContent = formatPrice(state.totalPrice);
    }

    private validateOrder(): void {
      if (!this.cart) return;

      const validation = this.cart.validateCart();
      const isEmpty = this.cart.isEmpty();

      // Show/hide validation errors
      if (validation.isValid) {
        this.validationErrors.classList.add('hidden');
      } else {
        this.validationErrors.classList.remove('hidden');
        this.validationErrorList.innerHTML = validation.errors
          .map(error => `<li>${error}</li>`)
          .join('');
      }

      // Update place order button state
      this.placeOrderBtn.disabled = !validation.isValid || isEmpty;
      
      if (validation.isValid && !isEmpty) {
        this.placeOrderBtn.classList.remove('bg-gray-400');
        this.placeOrderBtn.classList.add('bg-green-600', 'hover:bg-green-700');
      } else {
        this.placeOrderBtn.classList.add('bg-gray-400');
        this.placeOrderBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
      }
    }

    private setLoading(loading: boolean): void {
      this.placeOrderBtn.disabled = loading;
      
      if (loading) {
        this.placeOrderText.classList.add('hidden');
        this.placeOrderLoading.classList.remove('hidden');
      } else {
        this.placeOrderText.classList.remove('hidden');
        this.placeOrderLoading.classList.add('hidden');
      }
    }

    private async handlePlaceOrder(): Promise<void> {
      if (!this.cart || this.cart.isEmpty()) return;

      this.setLoading(true);

      try {
        const customerName = this.customerNameInput?.value.trim() || undefined;
        const customerPhone = this.customerPhoneInput?.value.trim() || undefined;

        const orderData = this.cart.toOrderData(customerName, customerPhone);
        const result = await createOrder(orderData);

        this.cart.clearCart();
        this.showOrderSuccess(result.order_id);

      } catch (error) {
        console.error('Failed to place order:', error);
        this.showOrderError(error);
      } finally {
        this.setLoading(false);
      }
    }

    private showOrderSuccess(orderId: string): void {
      this.successOrderId.textContent = orderId;
      this.orderSuccessModal.classList.remove('hidden');
    }

    private showOrderError(error: any): void {
      const message = error?.message || 'Failed to place order. Please try again.';
      
      const toast = document.createElement('div');
      toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-3 rounded-md shadow-lg z-50 max-w-sm';
      toast.innerHTML = `
        <div class="flex items-center">
          <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <p class="font-medium">Order Failed</p>
            <p class="text-sm opacity-90">${message}</p>
          </div>
        </div>
      `;
      
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 5000);
    }

    private navigateToMenu(): void {
      const urlPath = window.location.pathname;
      const matches = urlPath.match(/\/m\/([^\/]+)\/([^\/]+)/);
      
      if (matches) {
        const [, restaurantCode, tableCode] = matches;
        window.location.href = `/m/${restaurantCode}/${tableCode}`;
      }
    }

    private startNewOrder(): void {
      this.orderSuccessModal.classList.add('hidden');
      this.customerNameInput.value = '';
      this.customerPhoneInput.value = '';
      this.navigateToMenu();
    }

    public destroy(): void {
      if (this.unsubscribe) {
        this.unsubscribe();
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new OrderReview();
    });
  } else {
    new OrderReview();
  }
</script>

<style>
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>